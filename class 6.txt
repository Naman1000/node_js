Advanced Queries and Aggregations in MongoDB

Data Pipelines

Interviewer: avg prices categorised based on their type

db.orders.aggregate([
  {
	$group:{_id:"$name",
	orderquantity:{$sum:"$quantity"},
	averagePrice:{$avg:"$price"},
   
}
}
])


Example Amazon
Backend Engineers

name, addrss, contact, email, password, pincode

amazon wants you to filter data in groups of pincode 

output> pincode:number of users 
        005:896
        004:963
        006:396



Problem Statement
you need to find number of users in particular
pincodes based on their age (age should be less than 25 and more than 18)
Business Analytics, Data Analytics, Machine Learning

{
    customer id,
    name,
    address, 
    contact, 
    email, 
    age,
    password, 
    pincode
} 
  ^  >======|===================|======================|====================>  {
           match the            group the               show output             pincode:
           customer ids         data                    as                      number of users
                                based on pincode        pincode:number         }

                                AGGREGATION PIPELINES

    Aggregation pipelines in mongoDB implement multiple process on the data and returns computed results
    useful for gaining insights, doing business analytics, and data analytics

    Run Ads: Analysing where to allocate marketing funds




{
  _id: 0,
  name: 'Pepperoni',
  size: 'small',
  price: 19,
  quantity: 10,
  date: 2021-03-13T08:14:30.000Z
}


I want to find total order quantities of medium pizzas 
categorised based on name and order quantity

1st 

pizza size = medium

2nd

name:total_quantity


{
    pepperoni: quantity,
    vegan: quantity,
    cheese: quantity
}



db.orders.insertMany( [
   { _id: 0, name: "Pepperoni", size: "small", price: 19,
     quantity: 10, date: ISODate( "2021-03-13T08:14:30Z" ) },
   { _id: 1, name: "Pepperoni", size: "medium", price: 20,
     quantity: 20, date : ISODate( "2021-03-13T09:13:24Z" ) },
   { _id: 2, name: "Pepperoni", size: "large", price: 21,
     quantity: 30, date : ISODate( "2021-03-17T09:22:12Z" ) },
   { _id: 3, name: "Cheese", size: "small", price: 12,
     quantity: 15, date : ISODate( "2021-03-13T11:21:39.736Z" ) },
   { _id: 4, name: "Cheese", size: "medium", price: 13,
     quantity:50, date : ISODate( "2022-01-12T21:23:13.331Z" ) },
   { _id: 5, name: "Cheese", size: "large", price: 14,
     quantity: 10, date : ISODate( "2022-01-12T05:08:13Z" ) },
   { _id: 6, name: "Vegan", size: "small", price: 17,
     quantity: 10, date : ISODate( "2021-01-13T05:08:13Z" ) },
   { _id: 7, name: "Vegan", size: "medium", price: 18,
     quantity: 10, date : ISODate( "2021-01-13T05:10:13Z" ) }
] )

1st Aggregation > we find the total orders of pizzas based on their names


db.orders.aggregate([
 {
    //this function returns a temporary output, that doesnt affect the original data
    //the output is grouped based on different types of pizza
    //we are outputting each pizza's order quantity as well
	$group:{_id:"$name", orderQuantity:{$sum:"$quantity"}}
}
])

Aggregation 2 > Grouping pizzas based on sizes and outputing their total order quantity
and average price of each size

db.orders.aggregate([
  {
	$group:{_id:"$size",
	orderquantity:{$sum:"$quantity"},
	averagePrice:{$avg:"$price"}
}
}
])



Aggregation 3 > to find total orders of pizzas based on their names
                the output to be sorted based on the orders (descending)
                average prices


db.orders.aggregate([
  {	$group:{
		_id:"$name",
		orders:{$sum:"$quantity"},
		averagePrice:{$avg:"$price"}
		}
},
  {$sort:{orders:-1}}
])


output

{
  _id: 'Cheese',
  orders: 125,
  averagePrice: 13
}
{
  _id: 'Pepperoni',
  orders: 60,
  averagePrice: 20
}
{
  _id: 'Vegan',
  orders: 20,
  averagePrice: 17.5
}




Aggregation 3 > I want to first select medium pizzas, 
group them by number of orders
sort them in ascending order meaning least ordered pizzas first then most ordered

db.orders.aggregate([
    //1st stage of pipeline, filter the data based on size 
    and here we are only considering medium pizzas

  {
	$match:{size:"medium"}
},


//2nd we group the data based on names, and output the orders as well
  {
	$group:{
		_id:"$name",
		totalorders:{$sum:"$quantity"},
		avgPrice:{$avg:"$price"}
	}
},

//3rd we sort the aggregated data based on values of totalorders in ascending format
  {
		$sort:{totalorder:1}
}
])


4>


db.orders.aggregate([
    //displays or projects the data based on these conditions
    { 
    $project: {
    
        pizzaName: "$name",
        orderValue: { $multiply: ["$price", "$quantity"] },
        _id: 0
    
    }}
])

